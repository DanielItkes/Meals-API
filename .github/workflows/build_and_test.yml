name: build-and-test
on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          tags: meals-api:latest
          outputs: type=docker,dest=/tmp/image.tar

      - name: Write build result to file
        if: always()
        run: |
          datetime=$(date +"%Y-%m-%d %H:%M:%S")
          names="Daniel, Omer, Shachar"
          echo $datetime >> log.txt
          echo $names >> log.txt
          if [ -f /tmp/image.tar ]; then
            echo "Image successfully built" >> log.txt
          else
            echo "Image not able to be built" >> log.txt
          fi

      - name: Upload image artifact
        uses: actions/upload-artifact@v3
        with:
          name: meals-api
          path: /tmp/image.tar

      - name: Upload result file
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: log.txt
          path: log.txt
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    #1. download image and run it in a container
    - name: Download artifact
      uses: actions/download-artifact@v3
    - name: Load Docker images from previous workflows
      run: docker load --input meals-api/image.tar
    # - name: Download a single artifact
    #   uses: actions/download-artifact@v3
    #   with:
    #     name: log.txt
    - name: Check meals-api image is loaded
      run: docker image ls
    - name: Run image in container
      run: docker run --name meals-container -p8000:8000 meals-api &
    - name: Check container is running
      run: docker ps
    - name: Write container result to log file
      run: |
        CONTAINER_NAME="meals-container"
        if [ "$( docker container inspect -f '{{.State.Running}}' meals-container )" = "true" ]; then
          echo "Container up and running" >> log.txt/log.txt
        else
          echo "Container failed to run" >> log.txt/log.txt
        fi
    #2. set up python and pytest environment
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest # not using yet lint checker like ruff
        pip install requests
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    #3. run pytest tests and check results
    - name: Test with pytest  # additionally use ruff or other lint checkers
      run: |
        cd tests
        pytest -v assn3_tests.py > assn3_test_results.txt
    - name: upload test results
      if: always()  # always perform this step even if tests fail, to see results
      uses: actions/upload-artifact@v3
      with:
        name: assn3_test_results.txt
        path: tests/assn3_test_results.txt
    - debug:
        run: |
          ls
          ls log.txt
    - name: Write test result to log file
      run: |
        if grep -q "9 passed" tests/assn3_test_results.txt; then
          echo "tests succeeded" >> log.txt/log.txt
        else
          echo "tests failed" >> log.txt/log.txt
        fi

    - name: Upload updated log file
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: log.txt
        path: log.txt
    