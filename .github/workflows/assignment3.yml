name: assignment3
on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          tags: meals-api:latest
          outputs: type=docker,dest=/tmp/image.tar

      - name: Write build result to file
        if: always()
        run: |
          datetime=$(date -Iminutes)
          names="Daniel Itkes, Omer Geva, Shachar Weinmann"
          echo $datetime >> log.txt
          echo $names >> log.txt
          if ${{ steps.build_and_export.outcome == 'success' }}; then
            echo "Image successfully built" >> log.txt
          else
            echo "Image not able to be built" >> log.txt
          fi
      - name: Upload image artifact
        uses: actions/upload-artifact@v3
        with:
          name: meals-api
          path: /tmp/image.tar

      - name: Upload result file
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Logs
          path: log.txt

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Download artifact
      uses: actions/download-artifact@v3

    - name: Load Docker images from previous workflows
      run: docker load --input meals-api/image.tar

    - name: Run image in container
      run: docker run --name meals-container -p8000:8000 meals-api &

    - name: Write container result to log file
      run: |
        CONTAINER_NAME="meals-container"
        if [ "$( docker container inspect -f '{{.State.Running}}' meals-container )" = "true" ]; then
          echo "Container up and running" >> Logs/log.txt
        else
          echo "Container failed to run" >> Logs/log.txt
        fi
    - name: Set up Python
      uses: actions/setup-python@v4

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest # not using yet lint checker like ruff
        pip install requests
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Test with pytest
      run: |
        cd tests
        pytest -v assn3_tests.py > assn3_test_results.txt
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: Tests
        path: tests/assn3_test_results.txt

    - name: Write test result to log file
      if: always()  # always perform this step even if tests fail, to see results
      run: |
        if grep -q "FAILED" tests/assn3_test_results.txt; then
          echo "tests failed" >> Logs/log.txt
        else
          echo "tests succeeded" >> Logs/log.txt
        fi

    - name: Upload updated log file
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: Logs
        path: Logs/log.txt

  query:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Download artifact
      uses: actions/download-artifact@v3

    - name: Load Docker images from previous workflows
      run: docker load --input meals-api/image.tar

    - name: Run image in container
      run: docker run --name meals-container -p8000:8000 meals-api &

    - name: Set up Python
      uses: actions/setup-python@v4

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest # not using yet lint checker like ruff
        pip install requests
        pip install curl
        pip install jq
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Submit queries and record responses
      run: |
        while read dish; do
          # Post the dish and capture the response
          response=$(curl -s -X POST -H "Content-Type: application/json" -d "{\"name\":\"$dish\"}" http://localhost:8000/dishes)
          id=$(echo $response | jq -r '.ID')

          # Get the detailed information using the received ID
          detailed_response=$(curl -s -X GET http://localhost:8000/dishes/$id)

          # Extract the required details and format the output
          name=$(echo $detailed_response | jq -r '.name')
          calories=$(echo $detailed_response | jq -r '.cal')
          sodium=$(echo $detailed_response | jq -r '.sodium')
          sugar=$(echo $detailed_response | jq -r '.sugar')

          echo "$name contains $calories calories, $sodium mgs of sodium, and $sugar grams of sugar" >> response.txt
        done <query.txt

    - name: Upload reponse file
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: Responses
        path: response.txt
